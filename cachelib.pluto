local { base64, buffer, crypto, ffi, http } = require "*"
local base_path <const> = io.part(debug.getinfo(1, "S").source:sub(2), "parent")

function b64m_encode(data)
	return base64.encode(data, false):replace("/", "-")
end

function b64m_decode(data)
	return base64.decode(data:replace("-", "/"))
end

function get_local_path(path, suffix = "")
	return base_path.."/data/0"..suffix..path
end

class CacheManifest
	function __construct(path)
		self.bin = io.contents(get_local_path(path).."_H")
		if not self.bin then
			error(path.." was not found on disk. Forgot to download it or download failed?")
		end
		self.i = 1
		self.i += 20
		self.entry_i = 0
		self.num_entries, self.i = string.unpack("<I4", self.bin, self.i)
		if self.num_entries == 0 then
			self.num_entries, self.i = string.unpack("<I4", self.bin, self.i)
		end
		self.paths = {}
		self.hashes = {}
		self.unks = {}
	end

	function seek(opt_stop_at_path)
		while self.entry_i ~= self.num_entries do
			self.entry_i += 1
			local path, hash, unk
			path, self.i = string.unpack("<s4", self.bin, self.i)
			hash = self.bin:sub(self.i, self.i + 15)
			unk = self.bin:sub(self.i + 16, self.i + 19)
			self.i += 20
			self.paths:insert(path)
			self.hashes[path] = hash
			self.unks[path] = unk
			if path == opt_stop_at_path then
				return hash
			end
		end
	end

	function getHash(path)
		if hash := self.hashes[path] then
			return hash
		end
		return self:seek(path)
	end

	function getPaths()
		self:seek()
		return self.paths
	end

	function downloadFile(path, type, suffix = "")
		local manifest_hash = self:getHash(path)
		assert(manifest_hash ~= nil, "file not in manifest")

		local header_hash
		if cont := io.contents(get_local_path(path, suffix).."_H") then
			header_hash = cont:sub(1, 16)
		end

		if manifest_hash ~= header_hash then
			download_file(path, type, b64m_encode(manifest_hash), suffix)
		end
	end

	function setHash(path, hash)
		assert(#hash == 16)
		self:seek(path)
		self.hashes[path] = hash
	end

	function pack()
		self:seek()
		local bin = { "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".."\x0D\x00\x00\x00".."\x00\x00\x00\x00" }
		bin:insert(string.pack("<I4", #self.paths))
		for self.paths as path do
			bin:insert(string.pack("<s4", path))
			bin:insert(self.hashes[path])
			bin:insert(self.unks[path])
		end
		return bin:concat()
	end
end

function oodle_init()
	if not oo2core_9 then
		oo2core_9 = ffi.open(os.platform == "windows" ? base_path.."/oo2core_9" : base_path.."/oo2core_9.so")
		oo2core_9:cdef[[
		int OodleLZ_Decompress(const char* inputData, size_t inputLen, void* outputData, size_t outputLen, int a5, int a6, int a7, size_t a8, size_t a9, size_t a10, size_t a11, size_t a12, size_t a13, int a14);
		int OodleLZ_Compress(int format, const char* data, size_t size, void* out, int level, size_t pOptions, size_t a7, size_t a8, size_t a9);
		]]
	end
end

function oodle_decompress(compressed, decompressed_size)
	oodle_init()
	local out = ffi.alloc(decompressed_size)
	oo2core_9.OodleLZ_Decompress(compressed, #compressed, out, decompressed_size, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3)
	return ffi.read(out)
end

function oodle_compress(data)
	oodle_init()
	$define format = 13 -- https://github.com/Crauzer/OodleSharp/blob/master/OodleSharp/OodleFormat.cs
	$define level = 4 -- https://github.com/Crauzer/OodleSharp/blob/master/OodleSharp/OodleCompressionLevel.cs
	local out_data = ffi.alloc(#data + 69)
	local out_size = oo2core_9.OodleLZ_Compress(format, data, #data, out_data, level, 0, 0, 0, 0)
	return ffi.read(out_data):sub(1, out_size)
end

function shcc_decompress_chunk(bin, i)
	local chunk_type, decompressed_size, compressed_size
	chunk_type, i = string.unpack("<I1", bin, i)	
	decompressed_size, i = string.unpack("<I4", bin, i)
	compressed_size, i = string.unpack("<I4", bin, i)
	--[[print("chunk_type", chunk_type)
	print("compressed_size", compressed_size)
	print("decompressed_size", decompressed_size)]]
	if chunk_type == 0 then
		assert(compressed_size == decompressed_size)
		local data = bin:sub(i, i + compressed_size - 1)
		i += decompressed_size
		return data, i
	end
	assert(chunk_type == 2)
	return shcc_decompress_chunk_oodle(bin, i, decompressed_size)
end

function shcc_decompress_chunk_oodle(bin, i, decompressed_size)
	local decompressed = ""
	while #decompressed < decompressed_size do
		local block_info = bin:sub(i, i + 7)
		i += 8
		assert(block_info:byte(1) == 0x80)
		assert((block_info:byte(8) & 0x0F) == 0x01)
		local num1 = (block_info:byte(1) << 24) | (block_info:byte(2) << 16) | (block_info:byte(3) << 8) | block_info:byte(4)
		local num2 = (block_info:byte(5) << 24) | (block_info:byte(6) << 16) | (block_info:byte(7) << 8) | block_info:byte(8)
		local block_compressed_size = (num1 >> 2) & 0xFFFFFF
		local block_decompressed_size = (num2 >> 5) & 0xFFFFFF
		--[[print("block_compressed_size", block_compressed_size)
		print("block_decompressed_size", block_decompressed_size)]]
		assert(bin:byte(i) == 0x8C)
		decompressed ..= oodle_decompress(bin:sub(i, i + block_compressed_size - 1), block_decompressed_size)
		i += block_compressed_size
	end
	return decompressed, i
end

function shcc_unpack(bin)
	local i = 1
	i += 8
	local data = {}
	data.H, i = shcc_decompress_chunk(bin, i)
	try
		local B_start = i
		data.B, i = shcc_decompress_chunk(bin, i)
		data.B_compressed = bin:sub(B_start + 9, -15)
	catch _ then
	end
	return data
end

function shcc_hash(data)
	return crypto.md5("SHCC\x1F\x00\x00\x00"..data.H:sub(17)..(data.B_compressed or ""), true)
end

function shcc_pack_H(data)
	local bin = "SHCC\x1f\x00\x00\x00"
	local hash = crypto.md5("SHCC\x1f\x00\x00\x00"..data:sub(17), true)

	bin ..= "\x00"
	bin ..= string.pack("<I4I4", #data, #data)
	bin ..= hash
	bin ..= data:sub(17)

	bin ..= "\x00\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x52"
	bin ..= string.pack("<I4", crypto.crc32c(bin))

	return bin, hash
end

function shcc_pack_HB(H, B_compressed, B_decompressed_size)
	local bin = "SHCC\x1f\x00\x00\x00"
	local hash = shcc_hash({ H = H, B_compressed = B_compressed })

	bin ..= "\x00"
	bin ..= string.pack("<I4I4", #H, #H)
	bin ..= hash
	bin ..= H:sub(17)

	bin ..= "\x02"
	bin ..= string.pack("<I4I4", B_decompressed_size, #B_compressed)
	bin ..= B_compressed

	bin ..= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52"
	bin ..= string.pack("<I4", crypto.crc32c(bin))

	return bin, hash
end

function shcc_compress_chunk_oodle(data)
	local compressed = oodle_compress(data)
	local num1 = ((#compressed & 0xFFFFFF) << 2)
	local num2 = ((#data & 0xFFFFFF) << 5)
	return string.pack("I1I1I1I1I1I1I1I1",
		0x80,
		(num1 >> 16) & 0xFF,
		(num1 >> 8) & 0xFF,
		num1 & 0xFF,
		(num2 >> 24) & 0xFF,
		(num2 >> 16) & 0xFF,
		(num2 >> 8) & 0xFF,
		(num2 & 0xF0) | 0x01 -- Ensure (byte(8) & 0x0F) == 0x01
	)..compressed
end

TYPE_METADATA = 0x3 -- deco overrides, vendor manifests
TYPE_SOUND2 = 0x4
TYPE_SOUND = 0x6
TYPE_MANIFEST = 0xD -- also used for .cvr
TYPE_BIN = 0x2B
TYPE_DEPENDANCIES_BIN = 0x52
TYPE_LUA = 0x5B
TYPE_FBX = 0x60
TYPE_LEVEL_FBX = 0x67
TYPE_TMF = 0x73
TYPE_WAV = 0x8B
TYPE_ANIM_FBX = 0x84
TYPE_PNG = 0xA3
TYPE_FX_MAT = 0xD0
TYPE_SKEL_FBX = 0x110

function download_file(path, type, b64m_hash, suffix = "")
	local url = string.format("http://content.warframe.com/0%s%s!%X_%s", suffix, path, type, b64m_hash)
	print("Downloading "..url)
	local bin, status = http.request(url)
	if status == 200 then
		--io.contents("data/tmp", bin)
		--os.execute("decompress-shcc.exe data/tmp data"..path..suffix)
		local local_path = get_local_path(path, suffix)
		io.mkdirs(io.part(local_path, "parent"))
		if bin:sub(1, 4) ~= "SHCC" then
			bin = oodle_decompress(bin, #bin * 10)
		end
		local data = shcc_unpack(bin)
		io.contents(local_path.."_H", data.H)
		if data.B then
			io.contents(local_path.."_B", data.B)
		end
		if b64m_hash ~= "---------------------w" then
			assert(b64m_hash == b64m_encode(shcc_hash(data)))
		end
	else
		print("Download failed! (HTTP "..status..")")
	end
end

function toc_decode(bin)
	local i = 1
	i += 8
	local entries = {}
	local index = 1
	while i < #bin do
		local e = {}
		e.index = index
		index += 1
		e.cache_offset, e.timestamp, e.compressed_size, e.decompressed_size, e.reserved, e.parent_index, i = string.unpack("<I8I8I4I4I4I4", bin, i)
		e.name = string.unpack("z", bin, i)
		i += 64
		entries:insert(e)
	end
	return entries
end

function toc_encode(entries)
	local buf = new buffer()
	buf:append("\x4E\xC6\x67\x18\x14\x00\x00\x00")
	for entries as e do
		buf:append(string.pack("<I8I8I4I4I4I4", e.cache_offset, e.timestamp, e.compressed_size, e.decompressed_size, e.reserved, e.parent_index))
		buf:append(e.name)
		buf:append("\0":rep(64 - #e.name))
	end
	return buf:tostring()
end

function toc_get_path(entries, index)
	if index == 0 then
		return ""
	end
	local e = entries[index]
	return toc_get_path(entries, e.parent_index).."/"..e.name
end

function toc_find_path(entries, path)
	local name = path:split("/"):back()
	for i, e in entries do
		if e.name == name and toc_get_path(entries, i) == path then
			return e
		end
	end
end

function toc_list_files(entries, index)
	local files = {}
	for entries as e do
		if e.parent_index == index then
			files:insert(e)
		end
	end
	return files
end

function cache_get_toc_entry(cache, e)
	return shcc_decompress_chunk_oodle(cache, 1 + e.cache_offset, e.decompressed_size)
end

function zstd_init()
	if not libzstd then
		libzstd = ffi.open(os.platform == "windows" ? base_path.."/libzstd" : base_path.."/libzstd.so")
		libzstd:cdef[[
		size_t ZSTD_createDDict(const char* dictBuffer, size_t dictSize);
		size_t ZSTD_createDCtx();
		size_t ZSTD_DCtx_setParameter(size_t dctx, int param, int value);
		size_t ZSTD_decompress_usingDDict(size_t dctx, void* dst, size_t dstCapacity, const char* src, size_t srcSize, size_t ddict);
		size_t ZSTD_freeDCtx(size_t dctx);
		size_t ZSTD_freeDDict(size_t ddict);
		]]
	end
end

function unpack_u32_dyn_le(bin, i)
	local value = 0
	local byte
	local shift = 0
	while shift < 28 do
		byte, i = string.unpack("<I1", bin, i)
		value |= (byte & 0x7f) << shift
		if (byte & 0x80) == 0 then
			return value, i
		end
		shift += 7
	end
	byte, i = string.unpack("<I1", bin, i)
	assert(byte <= 0xF)
	value |= (byte << shift)
	return value, i
end

function pack_oml(value)
	local bin = "" 
	while true do
		local byte = value & 0x7F
		value >>= 7
		if value == 0 then
			bin ..= string.pack("<I1", byte)
			break
		end
		byte |= 0x80
		bin ..= string.pack("<I1", byte)
	end
	return bin
end

function languages_unpack(bin)
	zstd_init()
	local entries = {}
	local i = 1
	i += 16 -- hash
	i += 4 -- 0x14
	i += 4 -- 0x2B
	i += 4 -- 0x01
	do
		local num_suffixes
		num_suffixes, i = string.unpack("<I4", bin, i)
		for _ = 1, num_suffixes do
			_suffix, i = string.unpack("<s4", bin, i)
		end
	end
	local dict_bin, num_paths
	dict_bin, num_paths, i = string.unpack("<s4I4", bin, i)
	local dict = libzstd.ZSTD_createDDict(dict_bin, #dict_bin)
	local ctx = libzstd.ZSTD_createDCtx()
	libzstd.ZSTD_DCtx_setParameter(ctx, 1000, 1)
	for _ = 1, num_paths do
		local path, chunk, num_labels
		path, chunk, num_labels, i = string.unpack("<s4s4I4", bin, i)
		for __ = 1, num_labels do
			local name, offset, size, flags
			name, offset, size, flags, i = string.unpack("<s4I4I2I2", bin, i)
			local data = chunk:sub(1 + offset, offset + size)
			if (flags & 0x200) ~= 0 then
				local decompressed_size, data_i = unpack_u32_dyn_le(data, 1)
				local buf = ffi.alloc(decompressed_size)
				assert(decompressed_size == libzstd.ZSTD_decompress_usingDDict(ctx, buf, decompressed_size, data:sub(data_i), #data - (data_i - 1), dict))
				data = ffi.read(buf)
			end
			entries[path..name] = data
		end
	end
	libzstd.ZSTD_freeDCtx(ctx)
	libzstd.ZSTD_freeDDict(dict)
	return entries, dict_bin
end

-- A valid dict is needed for the game to successfully load the file.
function languages_pack(entries, dict = "")
	local paths = {}
	local num_paths = 0
	for k, v in entries do
		local i = k:rfind("/")
		local path = k:sub(1, i)
		local name = k:sub(i + 1)
		if not paths[path] then
			paths[path] = {}
			num_paths += 1
		end
		paths[path][name] = v
	end
	local bin = {}
	bin:insert("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	bin:insert("\x14\x00\x00\x00")
	bin:insert("\x2B\x00\x00\x00")
	bin:insert("\x01\x00\x00\x00")
	bin:insert("\x0F\x00\x00\x00\x03\x00\x00\x00\x5F\x64\x65\x03\x00\x00\x00\x5F\x65\x6E\x03\x00\x00\x00\x5F\x65\x73\x03\x00\x00\x00\x5F\x66\x72\x03\x00\x00\x00\x5F\x69\x74\x03\x00\x00\x00\x5F\x6A\x61\x03\x00\x00\x00\x5F\x6B\x6F\x03\x00\x00\x00\x5F\x70\x6C\x03\x00\x00\x00\x5F\x70\x74\x03\x00\x00\x00\x5F\x72\x75\x03\x00\x00\x00\x5F\x74\x63\x03\x00\x00\x00\x5F\x74\x68\x03\x00\x00\x00\x5F\x74\x72\x03\x00\x00\x00\x5F\x75\x6B\x03\x00\x00\x00\x5F\x7A\x68")
	bin:insert(string.pack("<s4", dict))
	bin:insert(string.pack("<I4", num_paths))
	for path, labels in paths do
		local chunk = new buffer()
		local chunk_size = 0
		local buf = {}
		local num_labels = 0
		for name, data in labels do
			buf:insert(string.pack("<s4I4I2I2", name, chunk_size, #data, 0))
			chunk:append(data)
			chunk:append("\0")
			chunk_size += #data + 1
			num_labels += 1
		end
		bin:insert(string.pack("<s4I4", path, chunk_size))
		bin:insert(chunk:tostring())
		bin:insert(string.pack("<I4", num_labels))
		bin:insert(buf:concat())
	end
	return bin:concat()
end
